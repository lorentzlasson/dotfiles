[user]
  name = Lorentz Lasson
  email = lasson.lorentz@gmail.com
[push]
  default = simple
[core]
  autocrlf = input
  editor = nvim.appimage

[alias]
  ac = !git add . && git commit --message
  acane = !git add . && git commit --amend --no-edit
  alias = config --get-regexp alias
  ap = add --patch
  b = branch
  backup = !git add . && git commit --amend --no-edit && git push --force-with-lease
  c = commit
  ca = commit --amend
  cane = commit --amend --no-edit
  cf = commit --fixup
  cl = clean -d --force
  cm = commit --message
  co = checkout
  cp = cherry-pick
  d = diff
  delete-remote-branch = push origin -d
  fixup = "!f() { git commit --fixup=$1; git -c sequence.editor=: rebase --interactive --autosquash $1~2;}; f"
  dstaged = diff --staged
  fe = fetch
  last = log --pretty=oneline --abbrev-commit -5
  logp = "log --color=always --graph --pretty=format:'%C(yellow)%h%Creset%C(cyan)%d%Creset %C(white bold)%s%Creset %C(white dim)(by %an %ar)%Creset' --all"
  logrelease = log --pretty=format:'%n_______ %h _______%n%b' --grep='---' origin/master..origin/develop
  logs = "log --pretty=oneline --abbrev-commit"
  p = push
  please = push --force-with-lease
  po = push --set-upstream origin HEAD
  prune-remote = remote update origin --prune
  r = reset
  rb = rebase
  rbc = !git add . && git rebase --continue
  rbi = rebase -i
  rbi20 = rebase -i HEAD~20
  rbi5 = rebase -i HEAD~5
  rbo = rebase --onto
  rbremote = !git fetch && git rebase origin/$1
  reset-to-remote = !git fetch && git reset --hard @{upstream}
  rl = reset HEAD~
  spluff = !git stash && git fetch && git rebase && git push && git stash pop
  st = status
  syncignore = !git rm -r --cached . && git add .
  testci = !git add . && git commit -m 'ðŸš§ CI'
  wip = !git add . && git commit -m 'ðŸš§\n\n[skip ci]'
[filter "gitignore"]
  clean = sed '/gitignore/d'
  smudge = cat
[filter "gitignorebelow"]
  clean = sed '/\\*gitignorebelow\\*/,$d'
  smudge = cat
[rerere]
  enabled = false
[rebase]
  autosquash = true
[submodule]
  recurse = true
[diff]
	submodule = log
[commit]
	gpgsign = true
