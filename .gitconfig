[user]
  name = Lorentz Lasson
  email = lasson.lorentz@gmail.com
[push]
  autoSetupRemote = true
  followTags = true
[core]
  autocrlf = input
  editor = nvim
[rerere]
  enabled = false
[rebase]
  autoSquash = true
  updateRefs = true
  autoStash = true
[submodule]
  recurse = true
[diff]
  submodule = log
  algorithm = histogram
  colorMoved = plain
  mnemonicPrefix = true
  renames = true
[branch]
  sort = -committerdate
[tag]
  sort = version:refname
[fetch]
  prune = true
  pruneTags = true
  all = true
[help]
  autocorrect = prompt
[commit]
  verbose = true
[merge]
  conflictstyle = zdiff3
[pull]
  rebase = true
[alias]
  aa = add :/
  ac = !git add . && git commit --message
  acane = !git add . && git commit --amend --no-edit
  alias = config --get-regexp alias
  ap = add --patch
  b = branch
  backup = !git add . && git commit --amend --no-edit && git push --force-with-lease
  c = commit
  ca = commit --amend
  cane = commit --amend --no-edit
  cb = switch --create
  cf = commit --fixup
  cl = clean -d --force
  cm = commit --message
  co = "!echo use git s"
  cp = cherry-pick
  d = diff
  deleteremotebranch = push origin -d
  dstaged = diff --staged
  fe = fetch
  fixup = "!f() { git commit --fixup=$1 && git -c sequence.editor=: rebase --interactive --autosquash $1~2; }; f"
  last = log --pretty=oneline --abbrev-commit -5
  logp = "log --color=always --graph --pretty=format:'%C(yellow)%h%Creset%C(cyan)%d%Creset %C(white bold)%s%Creset %C(white dim)(by %an %ar)%Creset' --all"
  logrelease = log --pretty=format:'%n_______ %h _______%n%b' --grep='---' origin/master..origin/develop
  logs = "log --pretty=oneline --abbrev-commit"
  nuke = !git reset && git restore :/ && git clean -d --force
  p = push
  please = push --force-with-lease
  po = push --set-upstream origin HEAD
  pruneremote = remote update origin --prune
  r = reset
  rb = rebase
  rbc = !git add . && git rebase --continue
  rbi = rebase --interactive
  rbilast = "!f() { git rebase --interactive HEAD~$1; }; f"
  rbo = rebase --onto
  rbremote = !git fetch && git rebase origin/HEAD
  restp = restore -p .
  rl = reset HEAD~
  rtr = !git fetch && git reset --hard @{upstream}
  s = switch
  sd = switch --detach
  spluff = !git stash && git fetch && git rebase && git push && git stash pop
  st = status
  stashm = stash push -m
  syncignore = !git rm -r --cached . && git add .
  testci = !git add . && git commit --message 'ðŸš§ CI'
  todoupdate = !git add :/TODO.md && git commit --message 'Update TODO'
  uncommit = "!f() { git reset HEAD~ -- $1 && git commit --amend --no-edit; }; f"
  unstash = "!f() { git stash apply stash^{/$1}; }; f"
  wip = !git add . && git commit --message 'ðŸš§\n\n[skip ci]'
